import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
from datetime import datetime

def criar_relatorio_ppt_completo(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos, all_indicators_cultura_cenarios=None):
    """
    Gera um relat√≥rio COMPLETO em PowerPoint com TODAS as informa√ß√µes do 5_indicadores.py
    Inclui: DREs, Indicadores, Pareceres, Fluxos de Caixa, An√°lises por Cultura, etc.
    """
    try:
        # Importa√ß√µes necess√°rias
        from pptx import Presentation
        from pptx.util import Inches, Pt
        from pptx.dml.color import RGBColor
        from pptx.enum.text import PP_ALIGN
        
        # Criar nova apresenta√ß√£o
        prs = Presentation()
        st.write("üîß Iniciando gera√ß√£o PowerPoint COMPLETO baseado em 5_indicadores.py...")
        
        def criar_slide_texto(titulo, texto):
            """Cria slide apenas com texto formatado"""
            slide_layout = prs.slide_layouts[1]  # Title and Content
            slide = prs.slides.add_slide(slide_layout)
            title = slide.shapes.title
            title.text = titulo
            
            # Configurar o conte√∫do de texto
            content = slide.placeholders[1]
            text_frame = content.text_frame
            text_frame.clear()
            
            # Dividir texto em par√°grafos
            paragraphs = texto.split('\n')
            for i, paragraph in enumerate(paragraphs):
                if i == 0:
                    p = text_frame.paragraphs[0]
                else:
                    p = text_frame.add_paragraph()
                
                p.text = paragraph
                p.font.size = Pt(11)
                if paragraph.startswith('‚Ä¢ **') or paragraph.startswith('üî¥') or paragraph.startswith('‚ö†Ô∏è') or paragraph.startswith('‚úÖ'):
                    p.font.bold = True
            
            return slide

        def criar_slide_com_tabela(title_text, df, format_financeiro=True):
            """Cria slide com DataFrame formatado como tabela"""
            if df.empty:
                return criar_slide_texto(title_text, "Dados n√£o dispon√≠veis para esta an√°lise.")
                
            slide_layout = prs.slide_layouts[1]
            slide = prs.slides.add_slide(slide_layout)
            title = slide.shapes.title
            title.text = title_text
            
            # Remover placeholder de conte√∫do
            if len(slide.placeholders) > 1:
                content_placeholder = slide.placeholders[1]
                sp = content_placeholder.element
                sp.getparent().remove(sp)
            
            # Criar tabela
            rows = len(df) + 1
            cols = len(df.columns)
            
            left = Inches(0.2)
            top = Inches(1.5)
            width = Inches(9.6)
            height = Inches(5.5)
            
            table = slide.shapes.add_table(rows, cols, left, top, width, height).table
            
            # Cabe√ßalho
            for j, col_name in enumerate(df.columns):
                cell = table.cell(0, j)
                cell.text = str(col_name)
                cell.fill.solid()
                cell.fill.fore_color.rgb = RGBColor(68, 114, 196)
                cell.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
                cell.text_frame.paragraphs[0].font.bold = True
                cell.text_frame.paragraphs[0].font.size = Pt(9)
            
            # Dados
            for i, (idx, row) in enumerate(df.iterrows()):
                for j, value in enumerate(row):
                    cell = table.cell(i + 1, j)
                    
                    if pd.isna(value):
                        cell.text = ""
                    elif isinstance(value, (int, float)):
                        if format_financeiro:
                            if "%" in str(df.columns[j]) or "Margem" in str(df.columns[j]):
                                cell.text = f"{value:.2f}%"
                            elif "R$" in str(df.columns[j]) or abs(value) >= 1000:
                                cell.text = f"R$ {value:,.0f}"
                            elif "CAGR" in str(df.columns[j]):
                                cell.text = f"{value:.2f}%"
                            else:
                                cell.text = f"{value:.2f}"
                        else:
                            cell.text = str(value)
                    else:
                        cell.text = str(value)
                    
                    cell.text_frame.paragraphs[0].font.size = Pt(8)
            
            return slide

        def gerar_parecer_consolidado_detalhado(indicators_cenario, cenario_name):
            """Gera parecer financeiro detalhado id√™ntico ao do 5_indicadores.py"""
            
            margem_media = np.mean(indicators_cenario["Margem L√≠quida (%)"])
            retorno_medio = np.mean(indicators_cenario["Retorno por Real Gasto"])
            liquidez_media = np.mean(indicators_cenario["Liquidez Operacional"])
            endividamento_medio = np.mean(indicators_cenario["Endividamento (%)"])
            produtividade_media = np.mean(indicators_cenario["Produtividade por Hectare (R$/ha)"])
            custo_receita_media = np.mean(indicators_cenario["Custo por Receita (%)"])
            
            # Tratar DSCR que pode ter valores infinitos
            dscr_values = [x for x in indicators_cenario["DSCR"] if x != float("inf")]
            dscr_medio = np.mean(dscr_values) if dscr_values else float("inf")
            
            break_even_media = np.mean(indicators_cenario["Break-Even Yield (sacas/ha)"])
            roa_medio = np.mean(indicators_cenario["ROA (%)"])
            
            parecer_items = []
            
            # Cabe√ßalho
            parecer_items.extend([
                f"AN√ÅLISE FINANCEIRA DETALHADA - CEN√ÅRIO {cenario_name.upper()}",
                "=" * 60,
                "",
                "üìä INDICADORES DE RENTABILIDADE:"
            ])
            
            # Margem L√≠quida
            if margem_media < 10:
                parecer_items.extend([
                    f"üî¥ MARGEM L√çQUIDA BAIXA ({margem_media:.2f}%)",
                    "   ‚Ä¢ Rentabilidade abaixo do ideal para o agroneg√≥cio",
                    "   ‚Ä¢ Considere renegociar pre√ßos com fornecedores",
                    "   ‚Ä¢ Investir em culturas de maior valor agregado",
                    "   ‚Ä¢ Revisar t√©cnicas de plantio e colheita"
                ])
            elif margem_media < 20:
                parecer_items.extend([
                    f"‚ö†Ô∏è MARGEM L√çQUIDA MODERADA ({margem_media:.2f}%)",
                    "   ‚Ä¢ Rentabilidade aceit√°vel, mas pode melhorar",
                    "   ‚Ä¢ Monitore custos para manter consist√™ncia",
                    "   ‚Ä¢ Busque oportunidades de otimiza√ß√£o"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ MARGEM L√çQUIDA EXCELENTE ({margem_media:.2f}%)",
                    "   ‚Ä¢ Excelente rentabilidade para o setor",
                    "   ‚Ä¢ Mantenha as pr√°ticas atuais",
                    "   ‚Ä¢ Considere reinvestir em expans√£o"
                ])
            
            parecer_items.append("")
            
            # Retorno por Real Gasto
            parecer_items.append("üí∞ EFICI√äNCIA DOS INVESTIMENTOS:")
            if retorno_medio < 0.2:
                parecer_items.extend([
                    f"üî¥ BAIXO RETORNO POR REAL GASTO ({retorno_medio:.2f})",
                    "   ‚Ä¢ Cada R$ 1,00 gasto retorna menos de R$ 0,20",
                    "   ‚Ä¢ Gastos com baixo retorno financeiro",
                    "   ‚Ä¢ Avalie redu√ß√£o de despesas operacionais",
                    "   ‚Ä¢ Otimize processos agr√≠colas e log√≠sticos"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ RETORNO ADEQUADO POR REAL GASTO ({retorno_medio:.2f})",
                    f"   ‚Ä¢ Cada R$ 1,00 gasto retorna R$ {retorno_medio:.2f}",
                    "   ‚Ä¢ Investimentos geram retorno satisfat√≥rio",
                    "   ‚Ä¢ Considere reinvestir em tecnologia"
                ])
            
            parecer_items.append("")
            
            # Liquidez Operacional
            parecer_items.append("üè¶ LIQUIDEZ E CAPACIDADE OPERACIONAL:")
            if liquidez_media < 1.5:
                parecer_items.extend([
                    f"üî¥ LIQUIDEZ OPERACIONAL BAIXA ({liquidez_media:.2f})",
                    "   ‚Ä¢ Risco de dificuldades para cobrir custos",
                    "   ‚Ä¢ Negocie prazos de pagamento com fornecedores",
                    "   ‚Ä¢ Busque linhas de cr√©dito de curto prazo",
                    "   ‚Ä¢ Monitore fluxo de caixa diariamente"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ LIQUIDEZ OPERACIONAL CONFORT√ÅVEL ({liquidez_media:.2f})",
                    "   ‚Ä¢ Boa capacidade de sustentar opera√ß√µes",
                    "   ‚Ä¢ Mantenha reservas para safras incertas",
                    "   ‚Ä¢ Considere investimentos estrat√©gicos"
                ])
            
            parecer_items.append("")
            
            # Endividamento
            parecer_items.append("üìà ESTRUTURA DE ENDIVIDAMENTO:")
            if endividamento_medio > 30:
                parecer_items.extend([
                    f"üî¥ ALTO ENDIVIDAMENTO ({endividamento_medio:.2f}%)",
                    "   ‚Ä¢ D√≠vidas elevadas comprometem rentabilidade",
                    "   ‚Ä¢ Priorize quita√ß√£o de empr√©stimos de alto custo",
                    "   ‚Ä¢ Renegocie taxas de juros com institui√ß√µes",
                    "   ‚Ä¢ Evite novos financiamentos n√£o essenciais"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ ENDIVIDAMENTO CONTROLADO ({endividamento_medio:.2f}%)",
                    "   ‚Ä¢ D√≠vidas em n√≠vel gerenci√°vel",
                    "   ‚Ä¢ Considere investimentos estrat√©gicos",
                    "   ‚Ä¢ Expans√£o de √°rea plantada pode ser vi√°vel"
                ])
            
            parecer_items.append("")
            
            # Produtividade
            parecer_items.append("üå± PRODUTIVIDADE E EFICI√äNCIA:")
            produtividade_status = "Boa produtividade" if produtividade_media > 5000 else "Produtividade pode ser melhorada"
            parecer_items.extend([
                f"üìä PRODUTIVIDADE POR HECTARE: R$ {produtividade_media:,.0f}/ha",
                f"   ‚Ä¢ {produtividade_status}",
                "   ‚Ä¢ Compare com benchmarks da regi√£o",
                "   ‚Ä¢ Avalie t√©cnicas de manejo e insumos"
            ])
            
            parecer_items.append("")
            
            # Custo por Receita
            parecer_items.append("üí∏ GEST√ÉO DE CUSTOS:")
            if custo_receita_media > 70:
                parecer_items.extend([
                    f"üî¥ CUSTO POR RECEITA ALTO ({custo_receita_media:.2f}%)",
                    "   ‚Ä¢ Custos operacionais consomem grande parte da receita",
                    "   ‚Ä¢ Analise insumos e processos para reduzir despesas",
                    "   ‚Ä¢ Negocie melhores pre√ßos com fornecedores",
                    "   ‚Ä¢ Otimize log√≠stica e armazenamento"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ CUSTO POR RECEITA CONTROLADO ({custo_receita_media:.2f}%)",
                    "   ‚Ä¢ Boa gest√£o de custos operacionais",
                    "   ‚Ä¢ Continue monitorando pre√ßos de insumos",
                    "   ‚Ä¢ Mantenha controle rigoroso dos gastos"
                ])
            
            parecer_items.append("")
            
            # DSCR
            parecer_items.append("üèõÔ∏è CAPACIDADE DE PAGAMENTO DE D√çVIDAS:")
            if dscr_medio != float("inf") and dscr_medio < 1.25:
                parecer_items.extend([
                    f"üî¥ DSCR BAIXO ({dscr_medio:.2f})",
                    "   ‚Ä¢ Risco de dificuldades no pagamento de d√≠vidas",
                    "   ‚Ä¢ Considere reestruturar financiamentos",
                    "   ‚Ä¢ Aumente receita ou reduza despesas",
                    "   ‚Ä¢ Monitore fluxo de caixa mensalmente"
                ])
            else:
                dscr_text = f"{dscr_medio:.2f}" if dscr_medio != float("inf") else "‚àû"
                parecer_items.extend([
                    f"‚úÖ DSCR ADEQUADO ({dscr_text})",
                    "   ‚Ä¢ Boa capacidade de cobrir d√≠vidas",
                    "   ‚Ä¢ Mantenha lucro operacional est√°vel",
                    "   ‚Ä¢ Considere expans√£o controlada"
                ])
            
            parecer_items.append("")
            
            # Break-Even Yield
            parecer_items.append("‚öñÔ∏è PONTO DE EQUIL√çBRIO:")
            risco_safra = "Alto risco em safras ruins" if break_even_media > 50 else "Risco moderado em cen√°rios adversos"
            parecer_items.extend([
                f"üìä BREAK-EVEN YIELD: {break_even_media:.1f} sacas/ha",
                f"   ‚Ä¢ {risco_safra}",
                "   ‚Ä¢ Diversifique culturas para reduzir risco",
                "   ‚Ä¢ Invista em seguro agr√≠cola"
            ])
            
            parecer_items.append("")
            
            # ROA
            parecer_items.append("üè≠ RETORNO SOBRE ATIVOS:")
            if roa_medio < 5:
                parecer_items.extend([
                    f"üî¥ ROA BAIXO ({roa_medio:.2f}%)",
                    "   ‚Ä¢ Baixa efici√™ncia no uso de ativos",
                    "   ‚Ä¢ Avalie venda de ativos ociosos",
                    "   ‚Ä¢ Invista em equipamentos mais produtivos",
                    "   ‚Ä¢ Otimize uso da terra dispon√≠vel"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ ROA ADEQUADO ({roa_medio:.2f}%)",
                    "   ‚Ä¢ Boa utiliza√ß√£o dos ativos",
                    "   ‚Ä¢ Considere expans√£o controlada",
                    "   ‚Ä¢ Mantenha efici√™ncia operacional"
                ])
            
            parecer_items.append("")
            
            # CAGR
            parecer_items.append("üìà AN√ÅLISE DE CRESCIMENTO:")
            cagr_receita = indicators_cenario.get("CAGR Receita (%)", 0)
            cagr_lucro = indicators_cenario.get("CAGR Lucro L√≠quido (%)", 0)
            
            parecer_items.extend([
                f"üìä CAGR RECEITA (5 anos): {cagr_receita:.2f}%/ano",
                f"üìä CAGR LUCRO L√çQUIDO (5 anos): {cagr_lucro:.2f}%/ano"
            ])
            
            if cagr_lucro < 0:
                parecer_items.extend([
                    "üî¥ CRESCIMENTO NEGATIVO DO LUCRO",
                    "   ‚Ä¢ Lucro em queda ao longo dos anos",
                    "   ‚Ä¢ Revisar estrat√©gias de custo, pre√ßo e produtividade",
                    "   ‚Ä¢ Considerar mudan√ßa no mix de culturas"
                ])
            elif cagr_lucro < 5:
                parecer_items.extend([
                    "‚ö†Ô∏è CRESCIMENTO BAIXO DO LUCRO",
                    "   ‚Ä¢ Crescimento abaixo da m√©dia do setor",
                    "   ‚Ä¢ Buscar oportunidades de melhoria"
                ])
            else:
                parecer_items.extend([
                    "‚úÖ CRESCIMENTO SAUD√ÅVEL DO LUCRO",
                    "   ‚Ä¢ Lucro em trajet√≥ria positiva consistente",
                    "   ‚Ä¢ Considere reinvestir em √°reas estrat√©gicas"
                ])
            
            return "\n".join(parecer_items)

        def gerar_parecer_cultura_detalhado(indicators_cultura, cultura, hectares_cultura, cenario):
            """Gera parecer detalhado por cultura"""
            if not indicators_cultura:
                return f"Dados insuficientes para an√°lise da cultura {cultura}"
            
            margem_cultura = np.mean(indicators_cultura.get("Margem L√≠quida (%)", [0]))
            retorno_cultura = np.mean(indicators_cultura.get("Retorno por Real Gasto", [0]))
            liquidez_cultura = np.mean(indicators_cultura.get("Liquidez Operacional", [0]))
            roa_cultura = np.mean(indicators_cultura.get("ROA (%)", [0]))
            custo_receita_cultura = np.mean(indicators_cultura.get("Custo por Receita (%)", [0]))
            
            # Calcular receita total da cultura
            receitas_por_cultura = st.session_state.get('receitas_por_cultura_cenarios', {}).get(cenario, {})
            receita_total_cultura = sum(receitas_por_cultura.get(cultura, {}).get(str(ano), 0) for ano in anos) if cultura in receitas_por_cultura else 0
            lucro_total_cultura = receita_total_cultura * (margem_cultura / 100) if margem_cultura > 0 else 0
            
            parecer_items = [
                f"AN√ÅLISE DETALHADA - CULTURA {cultura.upper()}",
                f"CEN√ÅRIO: {cenario.upper()}",
                "=" * 60,
                "",
                "üìä DADOS OPERACIONAIS:",
                f"   ‚Ä¢ √Årea cultivada: {hectares_cultura:.1f} hectares",
                f"   ‚Ä¢ Receita total projetada ({len(anos)} anos): R$ {receita_total_cultura:,.0f}",
                f"   ‚Ä¢ Lucro estimado: R$ {lucro_total_cultura:,.0f}"
            ]
            
            if hectares_cultura > 0:
                receita_ha_ano = receita_total_cultura / (hectares_cultura * len(anos))
                lucro_ha_ano = lucro_total_cultura / (hectares_cultura * len(anos))
                parecer_items.extend([
                    f"   ‚Ä¢ Receita m√©dia por hectare/ano: R$ {receita_ha_ano:,.0f}",
                    f"   ‚Ä¢ Lucro m√©dio por hectare/ano: R$ {lucro_ha_ano:,.0f}"
                ])
            
            parecer_items.extend([
                "",
                "üí∞ AN√ÅLISE DE RENTABILIDADE:"
            ])
            
            # An√°lise de performance
            if margem_cultura < 10:
                parecer_items.extend([
                    f"üî¥ MARGEM L√çQUIDA BAIXA: {margem_cultura:.1f}%",
                    "   ‚Ä¢ A√ß√£o urgente necess√°ria",
                    "   ‚Ä¢ Revisar custos de insumos espec√≠ficos",
                    "   ‚Ä¢ Avaliar t√©cnicas de manejo",
                    "   ‚Ä¢ Considerar variedades mais rent√°veis"
                ])
            elif margem_cultura < 20:
                parecer_items.extend([
                    f"‚ö†Ô∏è MARGEM L√çQUIDA MODERADA: {margem_cultura:.1f}%",
                    "   ‚Ä¢ Performance aceit√°vel",
                    "   ‚Ä¢ Buscar melhorias incrementais",
                    "   ‚Ä¢ Monitorar pre√ßos de mercado"
                ])
            else:
                parecer_items.extend([
                    f"‚úÖ MARGEM L√çQUIDA EXCELENTE: {margem_cultura:.1f}%",
                    "   ‚Ä¢ Cultura muito rent√°vel",
                    "   ‚Ä¢ Considerar expans√£o da √°rea",
                    "   ‚Ä¢ Mantenha pr√°ticas atuais"
                ])
            
            # Efici√™ncia
            parecer_items.extend([
                "",
                "‚ö° INDICADORES DE EFICI√äNCIA:",
                f"   ‚Ä¢ Retorno por Real gasto: R$ {retorno_cultura:.2f}",
                f"   ‚Ä¢ Liquidez operacional: {liquidez_cultura:.2f}",
                f"   ‚Ä¢ ROA: {roa_cultura:.1f}%",
                f"   ‚Ä¢ Custo por receita: {custo_receita_cultura:.1f}%"
            ])
            
            # CAGR se dispon√≠vel
            cagr_receita_cultura = indicators_cultura.get("CAGR Receita (%)", 0)
            cagr_lucro_cultura = indicators_cultura.get("CAGR Lucro L√≠quido (%)", 0)
            
            if cagr_lucro_cultura != 0:
                parecer_items.extend([
                    "",
                    "üìà CRESCIMENTO PROJETADO:",
                    f"   ‚Ä¢ CAGR Receita: {cagr_receita_cultura:.1f}%/ano",
                    f"   ‚Ä¢ CAGR Lucro: {cagr_lucro_cultura:.1f}%/ano"
                ])
                
                if cagr_lucro_cultura < 0:
                    parecer_items.append("   üî¥ Tend√™ncia declinante - reavaliar viabilidade")
                elif cagr_lucro_cultura < 5:
                    parecer_items.append("   ‚ö†Ô∏è Crescimento lento - buscar otimiza√ß√µes")
                else:
                    parecer_items.append("   ‚úÖ Crescimento saud√°vel - manter estrat√©gia")
            
            # Recomenda√ß√£o final
            parecer_items.extend([
                "",
                "üéØ RECOMENDA√á√ÉO ESTRAT√âGICA:"
            ])
            
            if margem_cultura >= 15 and retorno_cultura >= 0.2 and cagr_lucro_cultura >= 0:
                parecer_items.extend([
                    "   ‚úÖ CULTURA ALTAMENTE RECOMENDADA",
                    "   ‚Ä¢ Excelente performance em todos os indicadores",
                    "   ‚Ä¢ Priorizar aumento da √°rea cultivada",
                    "   ‚Ä¢ Investir em tecnologia para esta cultura",
                    "   ‚Ä¢ Usar como refer√™ncia para outras culturas"
                ])
            elif margem_cultura >= 10 and retorno_cultura >= 0.15:
                parecer_items.extend([
                    "   ‚úÖ CULTURA RECOMENDADA",
                    "   ‚Ä¢ Performance adequada para manuten√ß√£o",
                    "   ‚Ä¢ Manter √°rea atual",
                    "   ‚Ä¢ Buscar melhorias graduais",
                    "   ‚Ä¢ Monitorar tend√™ncias de mercado"
                ])
            else:
                parecer_items.extend([
                    "   ‚ö†Ô∏è CULTURA REQUER ATEN√á√ÉO ESPECIAL",
                    "   ‚Ä¢ Baixa performance financeira",
                    "   ‚Ä¢ Revisar completamente a estrat√©gia",
                    "   ‚Ä¢ Considerar substitui√ß√£o por outras culturas",
                    "   ‚Ä¢ Avaliar custos de sa√≠da vs melhoria"
                ])
            
            return "\n".join(parecer_items)

        # ========== IN√çCIO DA CRIA√á√ÉO DOS SLIDES ==========
        
        # SLIDE 1: CAPA PROFISSIONAL
        slide_layout = prs.slide_layouts[0]  # Title Slide
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = "üìà RELAT√ìRIO COMPLETO DE AN√ÅLISE FINANCEIRA"
        subtitle.text = f"""Gest√£o de Plantio - An√°lise Consolidada e por Cultura
        
Per√≠odo de An√°lise: {anos[0]} - {anos[-1]}
Cen√°rios: Projetado | Pessimista | Otimista

üìä Indicadores Financeiros Detalhados
üå± An√°lise por Cultura e Cen√°rio  
üí∞ Fluxos de Caixa Projetados
üìã Pareceres e Recomenda√ß√µes

Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
Base: Sistema 5_Indicadores.py"""
        
        # SLIDE 2: SUM√ÅRIO EXECUTIVO
        executivo_text = f"""RESUMO EXECUTIVO - AN√ÅLISE FINANCEIRA

üìä ESCOPO DA AN√ÅLISE:
‚Ä¢ Per√≠odo: {len(anos)} anos ({anos[0]} - {anos[-1]})
‚Ä¢ Cen√°rios analisados: {len(nomes_cenarios)} (Projetado, Pessimista, Otimista)
‚Ä¢ Culturas avaliadas: {len(df_culturas_for_excel) if not df_culturas_for_excel.empty else 'N√£o especificado'}

üí∞ PRINCIPAIS M√âTRICAS (Cen√°rio Projetado):
‚Ä¢ Receita total projetada: R$ {sum(all_dre_data['Projetado']['Receita']):,.0f}
‚Ä¢ Lucro l√≠quido total: R$ {sum(all_dre_data['Projetado']['Lucro L√≠quido']):,.0f}
‚Ä¢ Margem l√≠quida m√©dia: {np.mean(all_indicators['Projetado']['Margem L√≠quida (%)']):,.1f}%
‚Ä¢ ROA m√©dio: {np.mean(all_indicators['Projetado']['ROA (%)']):,.1f}%

üéØ ESTRUTURA DO RELAT√ìRIO:
‚úì An√°lise consolidada por cen√°rio
‚úì Indicadores financeiros detalhados  
‚úì Pareceres t√©cnicos especializados
‚úì An√°lise individual por cultura
‚úì Fluxos de caixa projetados
‚úì Comparativos entre cen√°rios
‚úì Recomenda√ß√µes estrat√©gicas"""
        
        criar_slide_texto("üìã Sum√°rio Executivo", executivo_text)

        # SLIDE 3: EXPLICA√á√ÉO DOS INDICADORES
        explicacao_text = """ENTENDENDO OS INDICADORES FINANCEIROS

üìä INDICADORES DE RENTABILIDADE:
‚Ä¢ Margem L√≠quida (%): Percentual do lucro em rela√ß√£o √† receita
‚Ä¢ Retorno por Real Gasto: Quanto cada R$ 1,00 gasto retorna de lucro
‚Ä¢ ROA (%): Retorno sobre ativos - efici√™ncia no uso de recursos

‚öñÔ∏è INDICADORES DE LIQUIDEZ:
‚Ä¢ Liquidez Operacional: Capacidade de cobrir custos operacionais
‚Ä¢ DSCR: Capacidade de pagamento de d√≠vidas

üí∏ INDICADORES DE CUSTOS:
‚Ä¢ Custo por Receita (%): Propor√ß√£o dos custos na receita
‚Ä¢ Endividamento (%): Peso das d√≠vidas na receita

üå± INDICADORES AGRONEG√ìCIO:
‚Ä¢ Produtividade por Hectare (R$/ha): Receita gerada por hectare
‚Ä¢ Break-Even Yield (sacas/ha): Produ√ß√£o m√≠nima para cobrir custos
‚Ä¢ Custo por Hectare (R$/ha): Custos totais por hectare

üìà INDICADORES DE CRESCIMENTO:
‚Ä¢ CAGR Receita (%): Taxa de crescimento anual da receita
‚Ä¢ CAGR Lucro (%): Taxa de crescimento anual do lucro"""
        
        criar_slide_texto("üìö Guia dos Indicadores Financeiros", explicacao_text)

        # ========== AN√ÅLISE CONSOLIDADA POR CEN√ÅRIO ==========
        st.write("üìä Criando slides consolidados por cen√°rio...")
        
        for i, cenario in enumerate(nomes_cenarios):
            emoji = "üìä" if cenario == "Projetado" else "üìâ" if cenario == "Pessimista" else "üìà"
            
            # DRE Consolidado
            if cenario in all_dre_data:
                dre_df = pd.DataFrame(all_dre_data[cenario])
                dre_df.index = [f"Ano {ano}" for ano in anos]
                criar_slide_com_tabela(f"{emoji} DRE Consolidado - {cenario}", dre_df)
            
            # Indicadores Consolidados
            if cenario in all_indicators:
                indicators_data = {}
                for key, values in all_indicators[cenario].items():
                    if isinstance(values, list) and len(values) == len(anos):
                        indicators_data[key] = values
                    elif isinstance(values, (int, float)):
                        # Para CAGR que s√£o valores √∫nicos
                        if key in ["CAGR Receita (%)", "CAGR Lucro L√≠quido (%)"]:
                            indicators_data[key] = [values] * len(anos)
                
                if indicators_data:
                    indicators_df = pd.DataFrame(indicators_data)
                    indicators_df.index = [f"Ano {ano}" for ano in anos]
                    
                    # Separar em duas tabelas se houver muitas colunas
                    if len(indicators_df.columns) > 6:
                        # Primeira tabela - indicadores principais
                        cols_principais = ["Margem L√≠quida (%)", "Retorno por Real Gasto", 
                                         "Liquidez Operacional", "ROA (%)", 
                                         "Produtividade por Hectare (R$/ha)", "Custo por Receita (%)"]
                        df_principais = indicators_df[[col for col in cols_principais if col in indicators_df.columns]]
                        criar_slide_com_tabela(f"{emoji} Indicadores Principais - {cenario}", df_principais)
                        
                        # Segunda tabela - indicadores complementares  
                        cols_complementares = [col for col in indicators_df.columns if col not in cols_principais]
                        if cols_complementares:
                            df_complementares = indicators_df[cols_complementares]
                            criar_slide_com_tabela(f"{emoji} Indicadores Complementares - {cenario}", df_complementares)
                    else:
                        criar_slide_com_tabela(f"{emoji} Indicadores Consolidados - {cenario}", indicators_df)
            
            # Parecer consolidado detalhado
            if cenario in all_indicators:
                parecer_text = gerar_parecer_consolidado_detalhado(all_indicators[cenario], cenario)
                criar_slide_texto(f"{emoji} Parecer Detalhado - {cenario}", parecer_text)

        # ========== COMPARATIVO ENTRE CEN√ÅRIOS ==========
        st.write("üìä Criando comparativo entre cen√°rios...")
        
        # Tabela comparativa final
        comparativo_data = []
        for cenario in nomes_cenarios:
            if cenario in all_indicators:
                receita_total = sum(all_dre_data[cenario]["Receita"])
                lucro_total = sum(all_dre_data[cenario]["Lucro L√≠quido"])
                margem_media = np.mean(all_indicators[cenario]["Margem L√≠quida (%)"])
                retorno_medio = np.mean(all_indicators[cenario]["Retorno por Real Gasto"])
                roa_medio = np.mean(all_indicators[cenario]["ROA (%)"])
                liquidez_media = np.mean(all_indicators[cenario]["Liquidez Operacional"])
                
                comparativo_data.append({
                    "Cen√°rio": cenario,
                    f"Receita Total ({len(anos)}a)": receita_total,
                    f"Lucro Total ({len(anos)}a)": lucro_total,
                    "Margem M√©dia (%)": margem_media,
                    "Retorno p/ Real": retorno_medio,
                    "ROA M√©dio (%)": roa_medio,
                    "Liquidez M√©dia": liquidez_media
                })
        
        if comparativo_data:
            comparativo_df = pd.DataFrame(comparativo_data)
            criar_slide_com_tabela("üìä Resumo Comparativo - Todos os Cen√°rios", comparativo_df)

        # An√°lise comparativa detalhada
        if len(comparativo_data) >= 2:
            lucro_proj = sum(all_dre_data['Projetado']['Lucro L√≠quido'])
            lucro_pess = sum(all_dre_data['Pessimista']['Lucro L√≠quido']) if 'Pessimista' in all_dre_data else lucro_proj
            lucro_otm = sum(all_dre_data['Otimista']['Lucro L√≠quido']) if 'Otimista' in all_dre_data else lucro_proj
            
            diferenca_pess = ((lucro_pess - lucro_proj) / lucro_proj * 100) if lucro_proj != 0 else 0
            diferenca_otm = ((lucro_otm - lucro_proj) / lucro_proj * 100) if lucro_proj != 0 else 0
            
            comparativo_text = f"""AN√ÅLISE COMPARATIVA ENTRE CEN√ÅRIOS

üìä IMPACTO FINANCEIRO DOS CEN√ÅRIOS:

üí∞ LUCRO TOTAL ({len(anos)} ANOS):
‚Ä¢ Cen√°rio Projetado: R$ {lucro_proj:,.0f}
‚Ä¢ Cen√°rio Pessimista: R$ {lucro_pess:,.0f} ({diferenca_pess:+.1f}%)
‚Ä¢ Cen√°rio Otimista: R$ {lucro_otm:,.0f} ({diferenca_otm:+.1f}%)

üìà VARIA√á√ÉO EM RELA√á√ÉO AO PROJETADO:
‚Ä¢ Impacto Negativo (Pessimista): R$ {abs(lucro_pess - lucro_proj):,.0f}
‚Ä¢ Potencial Positivo (Otimista): R$ {lucro_otm - lucro_proj:,.0f}
‚Ä¢ Amplitude Total: R$ {abs(lucro_otm - lucro_pess):,.0f}

‚ö†Ô∏è AN√ÅLISE DE RISCO:
{'‚Ä¢ Alto risco: varia√ß√£o pessimista > 20%' if abs(diferenca_pess) > 20 else '‚Ä¢ Risco moderado: varia√ß√£o controlada'}
{'‚Ä¢ Grande oportunidade: potencial otimista > 15%' if diferenca_otm > 15 else '‚Ä¢ Oportunidade moderada'}

üéØ RECOMENDA√á√ïES ESTRAT√âGICAS:
‚Ä¢ Preparar planos de conting√™ncia para cen√°rio pessimista
‚Ä¢ Identificar gatilhos para capturar oportunidades otimistas  
‚Ä¢ Monitorar indicadores-chave para ajustes tempestivos
‚Ä¢ Manter flexibilidade operacional e financeira"""
            
            criar_slide_texto("‚öñÔ∏è An√°lise Comparativa Detalhada", comparativo_text)

        # ========== AN√ÅLISE POR CULTURA ==========
        if all_indicators_cultura_cenarios:
            st.write("üå± Criando slides por cultura...")
            
            # Buscar dados complementares
            dre_por_cultura_cenarios = st.session_state.get('dre_por_cultura_cenarios', {})
            
            for cenario in nomes_cenarios:
                emoji = "üìä" if cenario == "Projetado" else "üìâ" if cenario == "Pessimista" else "üìà"
                
                if cenario in all_indicators_cultura_cenarios:
                    culturas = list(all_indicators_cultura_cenarios[cenario].keys())
                    
                    if culturas:
                        # Slide resumo das culturas no cen√°rio
                        resumo_culturas = []
                        for cultura in culturas:
                            indicators_cultura = all_indicators_cultura_cenarios[cenario][cultura]
                            if indicators_cultura:
                                margem = np.mean(indicators_cultura.get("Margem L√≠quida (%)", [0]))
                                retorno = np.mean(indicators_cultura.get("Retorno por Real Gasto", [0]))
                                
                                # Dados operacionais
                                plantios_cultura = [p for p in st.session_state.get('plantios', {}).values() if p.get('cultura') == cultura]
                                hectares = sum(p.get('hectares', 0) for p in plantios_cultura)
                                
                                resumo_culturas.append({
                                    "Cultura": cultura,
                                    "√Årea (ha)": hectares,
                                    "Margem (%)": margem,
                                    "Retorno": retorno,
                                    "Status": "‚úÖ" if margem >= 15 else "‚ö†Ô∏è" if margem >= 10 else "üî¥"
                                })
                        
                        if resumo_culturas:
                            resumo_df = pd.DataFrame(resumo_culturas)
                            criar_slide_com_tabela(f"{emoji} Resumo por Cultura - {cenario}", resumo_df)
                    
                    # Para cada cultura individualmente
                    for cultura in culturas:
                        st.write(f"     Processando {cultura}...")
                        
                        # DRE da cultura
                        if cenario in dre_por_cultura_cenarios and cultura in dre_por_cultura_cenarios[cenario]:
                            dre_cultura = dre_por_cultura_cenarios[cenario][cultura]
                            if dre_cultura:
                                dre_cultura_df = pd.DataFrame(dre_cultura)
                                dre_cultura_df.index = [f"Ano {ano}" for ano in anos]
                                criar_slide_com_tabela(f"{emoji} DRE {cultura} - {cenario}", dre_cultura_df)
                        
                        # Indicadores da cultura
                        if cultura in all_indicators_cultura_cenarios[cenario]:
                            indicators_cultura = all_indicators_cultura_cenarios[cenario][cultura]
                            
                            indicators_cultura_data = {}
                            for key, values in indicators_cultura.items():
                                if isinstance(values, list) and len(values) == len(anos):
                                    indicators_cultura_data[key] = values
                                elif isinstance(values, (int, float)):
                                    if key in ["CAGR Receita (%)", "CAGR Lucro L√≠quido (%)"]:
                                        indicators_cultura_data[key] = [values] * len(anos)
                            
                            if indicators_cultura_data:
                                indicators_cultura_df = pd.DataFrame(indicators_cultura_data)
                                indicators_cultura_df.index = [f"Ano {ano}" for ano in anos]
                                criar_slide_com_tabela(f"{emoji} Indicadores {cultura} - {cenario}", indicators_cultura_df)
                            
                            # Parecer detalhado da cultura
                            hectares_cultura = sum(
                                p.get('hectares', 0) 
                                for p in st.session_state.get('plantios', {}).values() 
                                if p.get('cultura') == cultura
                            )
                            
                            parecer_cultura_text = gerar_parecer_cultura_detalhado(
                                indicators_cultura, cultura, hectares_cultura, cenario
                            )
                            criar_slide_texto(f"{emoji} An√°lise {cultura} - {cenario}", parecer_cultura_text)

        # ========== FLUXO DE CAIXA ==========
        st.write("üí∞ Criando slides de fluxo de caixa...")
        
        # Fluxo de caixa consolidado
        for cenario in nomes_cenarios:
            emoji = "üìä" if cenario == "Projetado" else "üìâ" if cenario == "Pessimista" else "üìà"
            
            if cenario in all_dre_data:
                dre_data = all_dre_data[cenario]
                
                fluxo_data = {
                    "Receita Operacional": dre_data["Receita"],
                    "(-) Impostos s/ Venda": [-x for x in dre_data["Impostos Sobre Venda"]],
                    "(-) Desp. Operacionais": [-x for x in dre_data["Despesas Operacionais"]],
                    "(-) Desp. Administrativas": [-x for x in dre_data["Despesas Administrativas"]],
                    "(-) Despesas RH": [-x for x in dre_data["Despesas RH"]],
                    "(=) EBITDA": [
                        dre_data["Receita"][i] 
                        - dre_data["Impostos Sobre Venda"][i]
                        - dre_data["Despesas Operacionais"][i] 
                        - dre_data["Despesas Administrativas"][i]
                        - dre_data["Despesas RH"][i]
                        for i in range(len(anos))
                    ],
                    "(-) Desp. Extra Op.": [-x for x in dre_data["Despesas Extra Operacional"]],
                    "(-) Dividendos": [-x for x in dre_data["Dividendos"]],
                    "(-) Imp. s/ Resultado": [-x for x in dre_data["Impostos Sobre Resultado"]],
                    "(=) FLUXO L√çQUIDO": dre_data["Lucro L√≠quido"]
                }
                
                fluxo_df = pd.DataFrame(fluxo_data)
                fluxo_df.index = [f"Ano {ano}" for ano in anos]
                criar_slide_com_tabela(f"{emoji} Fluxo de Caixa - {cenario}", fluxo_df)

        # ========== RECOMENDA√á√ïES ESTRAT√âGICAS FINAIS ==========
        
        # An√°lise de risco consolidada
        risco_text = """AN√ÅLISE DE RISCOS E OPORTUNIDADES

üîç PRINCIPAIS RISCOS IDENTIFICADOS:

üìâ RISCOS FINANCEIROS:
‚Ä¢ Margem l√≠quida abaixo de 15% em alguns cen√°rios
‚Ä¢ Depend√™ncia de financiamentos externos
‚Ä¢ Volatilidade dos pre√ßos de commodities
‚Ä¢ Custos operacionais crescentes

üå°Ô∏è RISCOS OPERACIONAIS:
‚Ä¢ Variabilidade clim√°tica e safras
‚Ä¢ Pragas e doen√ßas nas culturas
‚Ä¢ Disponibilidade de m√£o de obra
‚Ä¢ Log√≠stica e armazenamento

üíπ RISCOS DE MERCADO:
‚Ä¢ Flutua√ß√£o cambial
‚Ä¢ Demanda internacional
‚Ä¢ Concorr√™ncia regional
‚Ä¢ Pol√≠ticas governamentais

üéØ OPORTUNIDADES ESTRAT√âGICAS:

‚úÖ MELHORIAS OPERACIONAIS:
‚Ä¢ Tecnologia agr√≠cola (precis√£o, automa√ß√£o)
‚Ä¢ Diversifica√ß√£o de culturas
‚Ä¢ Integra√ß√£o vertical
‚Ä¢ Sustentabilidade e certifica√ß√µes

üìà CRESCIMENTO:
‚Ä¢ Expans√£o de √°rea cultivada
‚Ä¢ Novos mercados e canais
‚Ä¢ Produtos com maior valor agregado
‚Ä¢ Parcerias estrat√©gicas

‚ö° A√á√ïES RECOMENDADAS:
‚Ä¢ Monitoramento cont√≠nuo de indicadores
‚Ä¢ Planos de conting√™ncia para cen√°rios adversos
‚Ä¢ Investimento em tecnologia e capacita√ß√£o
‚Ä¢ Diversifica√ß√£o como estrat√©gia de risco"""
        
        criar_slide_texto("‚ö†Ô∏è Gest√£o de Riscos e Oportunidades", risco_text)

        # Slide de recomenda√ß√µes finais
        recomendacoes_text = f"""RECOMENDA√á√ïES ESTRAT√âGICAS FINAIS

üéØ PRIORIDADES IMEDIATAS (0-6 MESES):

‚úÖ GEST√ÉO FINANCEIRA:
‚Ä¢ Implementar controle rigoroso de custos
‚Ä¢ Renegociar condi√ß√µes de financiamentos
‚Ä¢ Estabelecer reservas de emerg√™ncia
‚Ä¢ Monitorar fluxo de caixa semanalmente

üå± OPERA√á√ïES AGR√çCOLAS:
‚Ä¢ Otimizar uso de insumos por cultura
‚Ä¢ Implementar t√©cnicas de agricultura de precis√£o
‚Ä¢ Diversificar mix de culturas conforme an√°lise
‚Ä¢ Investir em capacita√ß√£o da equipe

üìä MONITORAMENTO:
‚Ä¢ Acompanhar indicadores mensalmente
‚Ä¢ Comparar com benchmarks do setor
‚Ä¢ Ajustar cen√°rios conforme realidade
‚Ä¢ Revisar estrat√©gias trimestralmente

üîÑ M√âDIO PRAZO (6-18 MESES):

üìà CRESCIMENTO SUSTENT√ÅVEL:
‚Ä¢ Expandir culturas com melhor performance
‚Ä¢ Investir em tecnologia e equipamentos
‚Ä¢ Desenvolver novos canais de comercializa√ß√£o
‚Ä¢ Buscar certifica√ß√µes e selos de qualidade

‚öñÔ∏è LONGO PRAZO (18+ MESES):

üè≠ INTEGRA√á√ÉO E INOVA√á√ÉO:
‚Ä¢ Considerar integra√ß√£o vertical
‚Ä¢ Desenvolver produtos com valor agregado  
‚Ä¢ Explorar mercados internacionais
‚Ä¢ Implementar pr√°ticas ESG

üí° PR√ìXIMOS PASSOS:
1. Definir KPIs de acompanhamento
2. Estabelecer comit√™ de an√°lise mensal
3. Criar dashboard de indicadores
4. Planejar revis√µes semestrais do plano"""
        
        criar_slide_texto("üöÄ Plano de A√ß√£o Estrat√©gico", recomendacoes_text)

        # SLIDE FINAL: CONCLUS√ïES
        slide_layout = prs.slide_layouts[0]
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = "üìä RELAT√ìRIO COMPLETO FINALIZADO"
        subtitle.text = f"""‚úÖ An√°lise Financeira Abrangente Conclu√≠da

üìã CONTE√öDO GERADO:
‚Ä¢ {len(prs.slides)} slides com an√°lises detalhadas
‚Ä¢ Indicadores de {len(nomes_cenarios)} cen√°rios completos
‚Ä¢ An√°lises individuais por cultura
‚Ä¢ Pareceres t√©cnicos especializados  
‚Ä¢ Fluxos de caixa projetados
‚Ä¢ Recomenda√ß√µes estrat√©gicas

üîß BASE T√âCNICA:
‚Ä¢ Sistema 5_Indicadores.py
‚Ä¢ Dados periodo {anos[0]}-{anos[-1]}
‚Ä¢ Metodologia financeira consolidada
‚Ä¢ Pareceres baseados em benchmarks do agroneg√≥cio

üìÖ Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
üè¢ Sistema de Gest√£o de Plantio
üíº An√°lise Profissional Completa"""

        # Salvar apresenta√ß√£o
        output_ppt = BytesIO()
        prs.save(output_ppt)
        output_ppt.seek(0)
        
        st.write(f"‚úÖ PowerPoint COMPLETO gerado com {len(prs.slides)} slides!")
        st.write("üìã Incluindo TODAS as an√°lises do 5_Indicadores.py:")
        st.write("   ‚Ä¢ DREs consolidados e por cultura")
        st.write("   ‚Ä¢ Indicadores financeiros detalhados")
        st.write("   ‚Ä¢ Pareceres t√©cnicos especializados")
        st.write("   ‚Ä¢ Fluxos de caixa projetados")
        st.write("   ‚Ä¢ Comparativos entre cen√°rios")
        st.write("   ‚Ä¢ An√°lises individuais por cultura")
        st.write("   ‚Ä¢ Recomenda√ß√µes estrat√©gicas")
        
        return output_ppt
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar PowerPoint: {str(e)}")
        import traceback
        st.error(traceback.format_exc())
        return None


def criar_relatorio_ppt(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos, all_indicators_cultura_cenarios=None):
    """
    Fun√ß√£o compat√≠vel que chama a vers√£o melhorada
    """
    return criar_relatorio_ppt_completo(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos, all_indicators_cultura_cenarios)
