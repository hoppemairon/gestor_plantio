import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from io import BytesIO
import base64
from datetime import datetime

# Importa as configura√ß√µes de sess√£o e a fun√ß√£o de c√°lculo do DRE existente
from utils.session import carregar_configuracoes
from utils.dre import calcular_dre # <--- ESSENCIAL: Reutilizar a fun√ß√£o existente!

carregar_configuracoes()

st.set_page_config(layout="wide", page_title="Indicadores Financeiros")
st.title("üìà Indicadores Financeiros e An√°lise - Agroneg√≥cio")

# --- Fun√ß√µes Auxiliares ---

def format_brl(x):
    """Formata um n√∫mero para o formato de moeda brasileira (R\$)."""
    try:
        # Verifica se x √© um n√∫mero antes de formatar
        if pd.isna(x) or not isinstance(x, (int, float)):
            return x
        return f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    except Exception:
        return x # Retorna o valor original em caso de erro

def calcular_cagr(valor_inicial, valor_final, periodos):
    """Calcula a Taxa de Crescimento Anual Composta (CAGR)."""
    if valor_inicial <= 0 or periodos <= 0:
        return 0.0 # Evita divis√£o por zero ou log de n√∫meros n√£o positivos
    if valor_final <= 0: # Se o valor final for negativo, √© um decl√≠nio
        # Calcula a taxa de decl√≠nio como um CAGR negativo
        # Usamos o valor absoluto para o c√°lculo da base, mas o resultado √© negativo
        return ((abs(valor_final) / valor_inicial) ** (1 / periodos) - 1) * -100
    return ((valor_final / valor_inicial) ** (1 / periodos) - 1) * 100

def display_indicator_explanation():
    """Exibe a se√ß√£o de explica√ß√£o dos indicadores financeiros."""
    with st.expander("üßæ Entenda os Indicadores Financeiros"):
        st.markdown("""
        Abaixo, apresentamos indicadores financeiros avan√ßados, adaptados ao contexto do agroneg√≥cio, com explica√ß√µes sobre sua import√¢ncia e interpreta√ß√£o:

        **1. Margem L√≠quida (%)**
        - **O que √©?** Percentual do lucro l√≠quido em rela√ß√£o √† receita total ap√≥s todas as despesas e impostos.
        - **Por que √© importante?** Mede a rentabilidade l√≠quida do neg√≥cio. No agroneg√≥cio, margens s√£o impactadas por custos sazonais (insumos, colheita) e pre√ßos de mercado.
        - **Exemplo:** Receita de R\$ 1.000.000 e lucro l√≠quido de R\$ 150.000 resultam em 15% de margem.
        - **Interpreta√ß√£o:** Margens abaixo de 10% sugerem necessidade de otimizar custos ou pre√ßos.

        **2. Retorno por Real Gasto**
        - **O que √©?** Quanto cada real gasto (despesas + impostos) gera de lucro l√≠quido.
        - **Por que √© importante?** Avalia a efici√™ncia dos investimentos, crucial em um setor com altos custos fixos e vari√°veis.
        - **Exemplo:** Gastos de R\$ 500.000 geram R\$ 100.000 de lucro (retorno de 0,2).
        - **Interpreta√ß√£o:** Valores abaixo de 0,2 indicam inefici√™ncia; analise despesas operacionais.

        **3. Liquidez Operacional**
        - **O que √©?** Quantas vezes a receita cobre as despesas operacionais.
        - **Por que √© importante?** Mostra a capacidade de sustentar opera√ß√µes sem depender de financiamentos, essencial em safras incertas.
        - **Exemplo:** Receita de R\$ 1.000.000 e despesas operacionais de R\$ 400.000 resultam em liquidez de 2,5.
        - **Interpreta√ß√£o:** Valores abaixo de 1,5 indicam risco de fluxo de caixa.

        **4. Endividamento (%)**
        - **O que √©?** Propor√ß√£o das parcelas de empr√©stimos em rela√ß√£o √† receita total.
        - **Por que √© importante?** Avalia o peso das d√≠vidas, comum no agroneg√≥cio para custeio e investimentos.
        - **Exemplo:** Parcelas de R\$ 200.000 com receita de R\$ 1.000.000 resultam em 20% de endividamento.
        - **Interpreta√ß√£o:** Acima de 30% √© arriscado; priorize redu√ß√£o de d√≠vidas.

        **5. Produtividade por Hectare (R\$/ha)**
        - **O que √©?** Receita gerada por hectare plantado.
        - **Por que √© importante?** Mede a efici√™ncia do uso da terra, um recurso cr√≠tico no agroneg√≥cio.
        - **Exemplo:** Receita de R\$ 1.000.000 em 500 ha resulta em R\$ 2.000/ha.
        - **Interpreta√ß√£o:** Valores baixos podem indicar baixa produtividade ou pre√ßos de mercado desfavor√°veis.

        **6. Custo por Receita (%)**
        - **O que √©?** Propor√ß√£o dos custos operacionais em rela√ß√£o √† receita.
        - **Por que √© importante?** Indica a efici√™ncia na gest√£o de custos, essencial em um setor com margens apertadas.
        - **Exemplo:** Custos operacionais de R\$ 600.000 e receita de R\$ 1.000.000 resultam em 60%.
        - **Interpreta√ß√£o:** Acima de 70% sugere necessidade de redu√ß√£o de custos.

        **7. Debt Service Coverage Ratio (DSCR)**
        - **O que √©?** Raz√£o entre o lucro operacional e as parcelas anuais de d√≠vidas.
        - **Por que √© importante?** Avalia a capacidade de pagar d√≠vidas com o lucro gerado, crucial para financiamentos agr√≠colas.
        - **Exemplo:** Lucro operacional de R\$ 300.000 e parcelas de R\$ 150.000 resultam em DSCR de 2,0.
        - **Interpreta√ß√£o:** Valores abaixo de 1,25 indicam risco de inadimpl√™ncia.

        **8. Break-Even Yield (sacas/ha)**
        - **O que √©?** Produtividade m√≠nima por hectare necess√°ria para cobrir todos os custos.
        - **Por que √© importante?** Ajuda a avaliar o risco de safras em cen√°rios de baixa produtividade.
        - **Exemplo:** Custos totais de R\$ 1.000.000, 500 ha e pre√ßo da saca de R\$ 100 resultam em 20 sacas/ha.
        - **Interpreta√ß√£o:** Valores altos indicam maior vulnerabilidade a falhas na safra.

        **9. Return on Assets (ROA) (%)**
        - **O que √©?** Percentual do lucro l√≠quido em rela√ß√£o ao total de ativos (estimado).
        - **Por que √© importante?** Mede a efici√™ncia do uso de ativos (terra, m√°quinas) para gerar lucro.
        - **Exemplo:** Lucro l√≠quido de R\$ 150.000 e ativos de R\$ 5.000.000 resultam em 3% de ROA.
        - **Interpreta√ß√£o:** Valores abaixo de 5% sugerem baixa efici√™ncia no uso de ativos.

        **10. CAGR Receita (%)**
        - **O que √©?** Taxa de crescimento anual composta da receita ao longo de 5 anos.
        - **Por que √© importante?** Indica a tend√™ncia de crescimento do faturamento, √∫til para planejamento.
        - **Exemplo:** Receita inicial de R\$ 1.000.000 e final de R\$ 1.300.000 resultam em ~5,4%.
        - **Interpreta√ß√£o:** Valores negativos indicam retra√ß√£o; revise pre√ßos ou produtividade.

        **11. CAGR Lucro L√≠quido (%)**
        - **O que √©?** Taxa de crescimento anual composta do lucro l√≠quido ao longo de 5 anos.
        - **Por que √© importante?** Reflete a sustentabilidade do lucro em um setor vol√°til.
        - **Exemplo:** Lucro inicial de R\$ 100.000 e final de R\$ 150.000 resultam em ~8,4%.
        - **Interpreta√ß√£o:** Valores negativos requerem revis√£o de custos ou estrat√©gias.
        """)

def get_base_financial_data():
    """
    Consolida a extra√ß√£o de dados financeiros base e o c√°lculo de receitas.
    Retorna um dicion√°rio com hectares_total, total_sacas, preco_total_base,
    receitas_cenarios, receitas_extras_projetadas e total_ativos.
    """
    required_keys = ["plantios", "dre_cenarios", "receitas_cenarios", "inflacoes", "anos"]
    for key in required_keys:
        if key not in st.session_state:
            st.warning(f"Dados essenciais n√£o encontrados: '{key}'. Por favor, verifique as p√°ginas anteriores (especialmente a de 'Fluxo de Caixa').")
            st.stop()
    if not st.session_state["plantios"]:
        st.warning("Nenhum plantio cadastrado. Cadastre ao menos um plantio para gerar os indicadores.")
        st.stop()

    plantios = st.session_state["plantios"]
    inflacoes = st.session_state["inflacoes"]
    anos = st.session_state["anos"]

    hectares_total = 0
    total_sacas = 0
    preco_total_base = 0 # Valor total da produ√ß√£o no ano base (sem infla√ß√£o)

    # Calcula totais de plantio
    for p_data in plantios.values():
        hectares = p_data.get("hectares", 0)
        sacas = p_data.get("sacas_por_hectare", 0)
        preco = p_data.get("preco_saca", 0)
        hectares_total += hectares
        total_sacas += sacas * hectares
        preco_total_base += preco * sacas * hectares # Soma de (pre√ßo * sacas * hectares)

    if hectares_total == 0 or total_sacas == 0:
        st.error("Dados de plantio incompletos para estimar receita e indicadores. Verifique o cadastro de plantios.")
        st.stop()

    # Estimativa de ativos totais (pode ser refinada ou configur√°vel pelo usu√°rio)
    # Estimativa aproximada: R\$20.000/ha para terra + R\$1.000.000 para ativos fixos (m√°quinas, etc.)
    total_ativos = hectares_total * 20000 + 1000000

    # Receitas j√° calculadas e armazenadas em 4_Fluxo_de_Caixa.py
    receitas_cenarios = st.session_state["receitas_cenarios"]

    # Receitas extras projetadas (tamb√©m j√° calculadas em 4_Fluxo_de_Caixa.py)
    # Precisamos recriar a estrutura aqui, pois o dre_calc usa um formato diferente
    receitas_extras_projetadas = {"Operacional": [0] * len(anos), "Extra Operacional": [0] * len(anos)}
    if "receitas_adicionais" in st.session_state:
        for receita_add in st.session_state["receitas_adicionais"].values():
            valor = receita_add["valor"]
            categoria = receita_add["categoria"]
            for ano_aplicacao in receita_add["anos_aplicacao"]:
                try:
                    idx = anos.index(ano_aplicacao)
                    if categoria == "Operacional":
                        # Aplica infla√ß√£o para receitas operacionais
                        fator = np.prod([1 + inflacoes[j] for j in range(idx + 1)])
                        receitas_extras_projetadas["Operacional"][idx] += valor * fator
                    else:
                        # Receitas extra operacionais n√£o sofrem ajuste de infla√ß√£o
                        receitas_extras_projetadas["Extra Operacional"][idx] += valor
                except ValueError:
                    # Ano n√£o encontrado, ignora
                    continue

    return {
        "plantios": plantios,
        "dre_cenarios": st.session_state["dre_cenarios"],
        "receitas_cenarios": receitas_cenarios,
        "inflacoes": inflacoes,
        "anos": anos,
        "pess_receita": st.session_state.get("pess_receita", 15),
        "pess_despesas": st.session_state.get("pess_despesas", 10),
        "otm_receita": st.session_state.get("otm_receita", 10),
        "otm_despesas": st.session_state.get("otm_despesas", 10),
        "despesas_info": pd.DataFrame(st.session_state.get("despesas", [])),
        "emprestimos": st.session_state.get("emprestimos", []),
        "hectares_total": hectares_total,
        "total_sacas": total_sacas,
        "preco_total_base": preco_total_base, # Valor total da produ√ß√£o no ano base
        "total_ativos": total_ativos,
        "receitas_extras_projetadas": receitas_extras_projetadas
    }

def calculate_indicators_for_scenario(scenario_name, dre_data, session_data):
    """Calcula todos os indicadores financeiros para um dado cen√°rio."""
    anos = session_data["anos"]
    hectares_total = session_data["hectares_total"]
    total_sacas = session_data["total_sacas"]
    preco_total_base = session_data["preco_total_base"]
    # Pre√ßo m√©dio por saca no ano base (para Break-Even Yield)
    preco_medio_saca_base = preco_total_base / total_sacas if total_sacas > 0 else 0
    total_ativos = session_data["total_ativos"]

    # Extrair dados relevantes do DRE
    receita = dre_data["Receita"]
    impostos_sobre_venda = dre_data["Impostos Sobre Venda"]
    despesas_operacionais = dre_data["Despesas Operacionais"]
    despesas_administrativas = dre_data["Despesas Administrativas"]
    despesas_rh = dre_data["Despesas RH"]
    despesas_extra_operacional = dre_data["Despesas Extra Operacional"]
    dividendos = dre_data["Dividendos"]
    impostos_sobre_resultado = dre_data["Impostos Sobre Resultado"]
    lucro_liquido = dre_data["Lucro L√≠quido"]
    lucro_operacional = dre_data["Lucro Operacional"] # J√° vem calculado do dre.py

    # Calcular despesas totais para cada ano
    despesas_totais = [
        impostos_sobre_venda[i] +
        despesas_operacionais[i] +
        despesas_administrativas[i] +
        despesas_rh[i] +
        despesas_extra_operacional[i] +
        dividendos[i] +
        impostos_sobre_resultado[i]
        for i in range(len(anos))
    ]

    indicators = {}

    # 1. Margem L√≠quida (%)
    indicators["Margem L√≠quida (%)"] = [
        (l / r * 100) if r != 0 else 0 for l, r in zip(lucro_liquido, receita)
    ]

    # 2. Retorno por Real Gasto
    indicators["Retorno por Real Gasto"] = [
        (l / d) if d != 0 else 0 for l, d in zip(lucro_liquido, despesas_totais)
    ]

    # 3. Liquidez Operacional (Receita / Despesas Operacionais)
    indicators["Liquidez Operacional"] = [
        (r / d) if d != 0 else 0 for r, d in zip(receita, despesas_operacionais)
    ]

    # 4. Endividamento (%) (Total Parcelas Empr√©stimos / Receita Total)
    # Usando Despesas Extra Operacional como proxy para o servi√ßo da d√≠vida,
    # pois o dre.py j√° incorpora os ajustes de cen√°rio para empr√©stimos nessa linha.
    endividamento_anual = []
    for i in range(len(anos)):
        # Assumindo que Despesas Extra Operacional inclui principalmente pagamentos de empr√©stimos
        # Se houver outras despesas extra operacionais significativas, isso pode ser menos preciso.
        total_servico_divida_ano = despesas_extra_operacional[i]
        endividamento_anual.append((total_servico_divida_ano / receita[i] * 100) if receita[i] != 0 else 0)
    indicators["Endividamento (%)"] = endividamento_anual

    # 5. Produtividade por Hectare (R\$/ha)
    indicators["Produtividade por Hectare (R$/ha)"] = [
        (r / hectares_total) if hectares_total != 0 else 0 for r in receita
    ]

    # 6. Custo por Receita (%)
    indicators["Custo por Receita (%)"] = [
        (d / r * 100) if r != 0 else 0 for d, r in zip(despesas_operacionais, receita)
    ]

    # 7. Debt Service Coverage Ratio (DSCR)
    # DSCR = Lucro Operacional / Total Debt Service (pagamentos de empr√©stimos)
    dscr_anual = []
    for i in range(len(anos)):
        total_servico_divida_ano = despesas_extra_operacional[i] # Usando proxy novamente
        if total_servico_divida_ano != 0:
            dscr_anual.append(lucro_operacional[i] / total_servico_divida_ano)
        else:
            dscr_anual.append(float("inf")) # Sem servi√ßo da d√≠vida, ent√£o a cobertura √© infinita
    indicators["DSCR"] = dscr_anual

    # 8. Break-Even Yield (sacas/ha)
    # Break-Even Yield = (Custos Totais / (Hectares * Pre√ßo por Saca))
    # Usando o pre√ßo m√©dio por saca do ano base para a proje√ß√£o
    indicators["Break-Even Yield (sacas/ha)"] = [
        (despesas_totais[i] / (hectares_total * preco_medio_saca_base)) if (hectares_total != 0 and preco_medio_saca_base != 0) else 0
        for i in range(len(anos))
    ]

    # 9. Return on Assets (ROA) (%)
    indicators["ROA (%)"] = [
        (l / total_ativos * 100) if total_ativos != 0 else 0 for l in lucro_liquido
    ]

    # 10. CAGR Receita (%)
    indicators["CAGR Receita (%)"] = calcular_cagr(receita[0], receita[-1], len(anos) - 1)

    # 11. CAGR Lucro L√≠quido (%)
    indicators["CAGR Lucro L√≠quido (%)"] = calcular_cagr(lucro_liquido[0], lucro_liquido[-1], len(anos) - 1)

    # 12. Custo por Hectare (R\$/ha)
    indicators["Custo por Hectare (R$/ha)"] = [
        (d / hectares_total) if hectares_total != 0 else 0 for d in despesas_totais
    ]

    return indicators

def display_scenario_parameters(session_data):
    with st.expander("###  ‚öñÔ∏è Infla√ß√£o e Par√¢metros de Cen√°rio Atuais"):
        """Exibe os par√¢metros atuais do cen√°rio (infla√ß√£o, ajustes pessimistas/otimistas)."""
        st.markdown("### üìà Infla√ß√£o Estimada por Ano")
        cols = st.columns(len(session_data["anos"]))
        for i, col in enumerate(cols):
            with col:
                st.metric(f"Ano {i+1}", f"{session_data['inflacoes'][i]:.2f}%")

        st.markdown("### üîß Par√¢metros de Cen√°rio Atuais")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üí∏ Receita Pessimista", f"-{session_data['pess_receita']}%")
        with col2:
            st.metric("üí∞ Despesa Pessimista", f"+{session_data['pess_despesas']}%")
        with col3:
            st.metric("üí∏ Receita Otimista", f"+{session_data['otm_receita']}%")
        with col4:
            st.metric("üí∞ Despesa Otimista", f"-{session_data['otm_despesas']}%")

def display_revenue_by_crop(session_data):
    """Exibe o detalhamento da receita por cultura e receitas adicionais."""
    st.markdown("### üí∞ Receita por Cultura Agr√≠cola e Receitas Extras (Ano Base)")
    culturas = {}
    for p in session_data["plantios"].values():
        cultura = p["cultura"]
        receita = p["hectares"] * p["sacas_por_hectare"] * p["preco_saca"]
        if cultura not in culturas:
            culturas[cultura] = {"receita": 0, "hectares": 0}
        culturas[cultura]["receita"] += receita
        culturas[cultura]["hectares"] += p["hectares"]

    df_culturas_data = []
    for cultura, dados in culturas.items():
        df_culturas_data.append({
            "Cultura": cultura,
            "Receita Total": dados["receita"],
            "√Årea (ha)": dados["hectares"],
            "Receita por ha": dados["receita"] / dados["hectares"] if dados["hectares"] != 0 else 0
        })

    # Adicionar receitas adicionais se existirem no session_state
    if "receitas_adicionais" in st.session_state:
        receitas_extras_base = {"Operacional": 0, "Extra Operacional": 0}
        for receita_add in st.session_state["receitas_adicionais"].values():
            valor = receita_add["valor"]
            categoria = receita_add["categoria"]
            # Soma o valor base, n√£o o projetado
            receitas_extras_base[categoria] += valor

        for cat in ["Operacional", "Extra Operacional"]:
            if receitas_extras_base[cat] > 0:
                df_culturas_data.append({
                    "Cultura": f"Receita Extra ({cat})",
                    "Receita Total": receitas_extras_base[cat],
                    "√Årea (ha)": 0,
                    "Receita por ha": 0
                })

    df_culturas = pd.DataFrame(df_culturas_data)

    st.dataframe(
        df_culturas.style.format({
            "Receita Total": format_brl,
            "√Årea (ha)": "{:.2f}",
            "Receita por ha": format_brl,
        }),
        use_container_width=True,
        hide_index=True
    )
    return df_culturas # Retorna para uso na exporta√ß√£o

def display_indicators_table(all_indicators, anos):
    """Exibe a tabela formatada de indicadores financeiros para cada cen√°rio."""
    st.markdown("### üìä Indicadores Financeiros")
    nomes_cenarios = ["Projetado", "Pessimista", "Otimista"]
    for cenario_name in nomes_cenarios:
        indicators = all_indicators[cenario_name]
        st.subheader(f"Cen√°rio {cenario_name}")
        df_indicadores = pd.DataFrame({
            k: v for k, v in indicators.items()
            if k not in ["CAGR Receita (%)", "CAGR Lucro L√≠quido (%)"]
        }, index=anos)

        styled_df = df_indicadores.style.format({
            "Margem L√≠quida (%)": "{:.2f}%",
            "Retorno por Real Gasto": "{:.2f}",
            "Endividamento (%)": "{:.2f}%",
            "Liquidez Operacional": "{:.2f}",
            "Produtividade por Hectare (R$/ha)": format_brl,
            "Custo por Receita (%)": "{:.2f}%",
            "DSCR": "{:.2f}",
            "Break-Even Yield (sacas/ha)": "{:.2f}",
            "ROA (%)": "{:.2f}%",
            "Custo por Hectare (R$/ha)": format_brl
        })

        st.dataframe(styled_df, use_container_width=True)

        #col_a, col_b = st.columns(2)
        #with col_a:
        #    st.metric("üìà CAGR Receita (5 anos)", f"{indicators['CAGR Receita (%)']:.2f}%")
        #with col_b:
        #    st.metric("üìà CAGR Lucro L√≠quido (5 anos)", f"{indicators['CAGR Lucro L√≠quido (%)']:.2f}%")

def display_financial_summary(all_dre_data, anos):
    """Exibe o resumo financeiro anual (Receita, Despesas Totais, Lucro L√≠quido)."""
    st.markdown("### üìò Resumo Financeiro por Ano")
    nomes_cenarios = ["Projetado", "Pessimista", "Otimista"]
    for cenario_name in nomes_cenarios:
        dre_data = all_dre_data[cenario_name]
        st.subheader(f"Resumo - Cen√°rio {cenario_name}")

        # Recalcular despesas totais para consist√™ncia do resumo
        despesas_totais = [
            dre_data["Impostos Sobre Venda"][i] +
            dre_data["Despesas Operacionais"][i] +
            dre_data["Despesas Administrativas"][i] +
            dre_data["Despesas RH"][i] +
            dre_data["Despesas Extra Operacional"][i] +
            dre_data["Dividendos"][i] +
            dre_data["Impostos Sobre Resultado"][i]
            for i in range(len(anos))
        ]

        resumo = pd.DataFrame({
            "Receita": dre_data["Receita"],
            "Despesas Totais": despesas_totais,
            "Lucro L√≠quido": dre_data["Lucro L√≠quido"]
        }, index=anos)

        st.dataframe(
            resumo.style.format({
                "Receita": format_brl,
                "Despesas Totais": format_brl,
                "Lucro L√≠quido": format_brl,
            }),
            use_container_width=True
        )

def generate_visualizations(all_dre_data, all_indicators, anos, nomes_cenarios, session_data):
    """Gera e exibe os gr√°ficos Plotly."""
    st.markdown("### üìà Visualiza√ß√µes")

    st.subheader("Receita vs. Lucro L√≠quido")
    fig1 = go.Figure()
    for cenario in nomes_cenarios:
        fig1.add_trace(go.Bar(
            x=anos, y=all_dre_data[cenario]["Receita"], name=f"Receita ({cenario})",
            marker_color="#1f77b4" if cenario == "Projetado" else "#ff7f0e" if cenario == "Pessimista" else "#2ca02c"
        ))
        fig1.add_trace(go.Bar(
            x=anos, y=all_dre_data[cenario]["Lucro L√≠quido"], name=f"Lucro L√≠quido ({cenario})",
            marker_color="#aec7e8" if cenario == "Projetado" else "#ffbb78" if cenario == "Pessimista" else "#98df8a"
        ))
    fig1.update_layout(barmode="group", title="Compara√ß√£o de Receita e Lucro L√≠quido", yaxis_title="R$", template="plotly_white")
    st.plotly_chart(fig1, use_container_width=True)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Distribui√ß√£o de Despesas (Cen√°rio Projetado)")
        despesas_info = session_data.get("despesas_info") # Usar o df_despesas_info do session_data
        if not despesas_info.empty:
            df_despesas_categorias = despesas_info.groupby("Categoria")["Valor"].sum()
            if not df_despesas_categorias.empty:
                fig4 = px.pie(values=df_despesas_categorias.values, names=df_despesas_categorias.index, title="Distribui√ß√£o de Despesas por Categoria")
                fig4.update_layout(template="plotly_white")
                st.plotly_chart(fig4, use_container_width=True)
            else:
                st.warning("Nenhuma despesa cadastrada para exibir a distribui√ß√£o.")
        else:
            st.warning("Nenhuma despesa cadastrada para exibir a distribui√ß√£o.")


    with col2:
        st.subheader("Margem L√≠quida vs. Custo por Receita")
        fig2 = go.Figure()
        for cenario in nomes_cenarios:
            fig2.add_trace(go.Scatter(
                x=anos, y=all_indicators[cenario]["Margem L√≠quida (%)"], name=f"Margem L√≠quida ({cenario})",
                line=dict(color="#1f77b4" if cenario == "Projetado" else "#ff7f0e" if cenario == "Pessimista" else "#2ca02c")
            ))
            fig2.add_trace(go.Scatter(
                x=anos, y=all_indicators[cenario]["Custo por Receita (%)"], name=f"Custo por Receita ({cenario})",
                line=dict(color="#aec7e8" if cenario == "Projetado" else "#ffbb78" if cenario == "Pessimista" else "#98df8a", dash="dash")
            ))
        fig2.update_layout(title="Margem L√≠quida vs. Custo por Receita", yaxis_title="Percentual (%)", template="plotly_white")
        st.plotly_chart(fig2, use_container_width=True)

    st.subheader("Produtividade por Hectare e Break-Even Yield")
    fig3 = go.Figure()
    for cenario in nomes_cenarios:
        fig3.add_trace(go.Bar(
            x=anos, y=all_indicators[cenario]["Produtividade por Hectare (R$/ha)"], name=f"Produtividade por Hectare ({cenario})",
            marker_color="#1f77b4" if cenario == "Projetado" else "#ff7f0e" if cenario == "Pessimista" else "#2ca02c"
        ))
        fig3.add_trace(go.Scatter(
            x=anos, y=all_indicators[cenario]["Break-Even Yield (sacas/ha)"], name=f"Break-Even Yield ({cenario})",
            line=dict(color="#aec7e8" if cenario == "Projetado" else "#ffbb78" if cenario == "Pessimista" else "#98df8a")
        ))
    fig3.update_layout(barmode="group", title="Produtividade por Hectare vs. Break-Even Yield", yaxis_title="R$/ha e Sacas/ha", template="plotly_white")
    st.plotly_chart(fig3, use_container_width=True)

def generate_financial_opinion(all_indicators, session_data):
    """Gera um parecer financeiro textual para cada cen√°rio."""
    st.markdown("### üìù Parecer Financeiro")
    nomes_cenarios = ["Projetado", "Pessimista", "Otimista"]
    hectares_total = session_data["hectares_total"]
    total_sacas = session_data["total_sacas"]
    preco_total_base = session_data["preco_total_base"] # Valor total da produ√ß√£o no ano base
    
    # Calcular a receita m√©dia por hectare no ano base para compara√ß√£o
    media_receita_hectare_base = (preco_total_base / total_sacas) * (total_sacas / hectares_total) if total_sacas != 0 and hectares_total != 0 else 0
    current_avg_yield = total_sacas / hectares_total if hectares_total != 0 else 0

    for cenario in nomes_cenarios:
        st.subheader(f"Parecer - Cen√°rio {cenario}")
        indicators = all_indicators[cenario]

        margem_media = np.mean(indicators["Margem L√≠quida (%)"])
        retorno_medio = np.mean(indicators["Retorno por Real Gasto"])
        liquidez_media = np.mean(indicators["Liquidez Operacional"])
        endividamento_medio = np.mean(indicators["Endividamento (%)"])
        produtividade_media = np.mean(indicators["Produtividade por Hectare (R$/ha)"])
        custo_receita_media = np.mean(indicators["Custo por Receita (%)"])
        # Filtrar valores inf para m√©dia do DSCR
        dscr_values = [x for x in indicators["DSCR"] if x != float("inf")]
        dscr_medio = np.mean(dscr_values) if dscr_values else float("inf")
        break_even_media = np.mean(indicators["Break-Even Yield (sacas/ha)"])
        roa_medio = np.mean(indicators["ROA (%)"])

        parecer = []
        # Limiares para a opini√£o (podem ser configur√°veis)
        if margem_media < 10:
            parecer.append(f"Margem L√≠quida Baixa ({margem_media:.2f}%): Rentabilidade abaixo do ideal. Considere renegociar pre√ßos com fornecedores ou investir em culturas de maior valor agregado.")
        else:
            parecer.append(f"Margem L√≠quida Saud√°vel ({margem_media:.2f}%): Boa rentabilidade. Monitore custos para manter a consist√™ncia.")

        if retorno_medio < 0.2:
            parecer.append(f"Retorno por Real Gasto Baixo ({retorno_medio:.2f}): Gastos com baixo retorno. Avalie a redu√ß√£o de despesas operacionais ou otimize processos agr√≠colas.")
        else:
            parecer.append(f"Retorno por Real Gasto Adequado ({retorno_medio:.2f}): Investimentos geram retorno satisfat√≥rio. Considere reinvestir em tecnologia para aumentar a produtividade.")

        if liquidez_media < 1.5:
            parecer.append(f"Liquidez Operacional Baixa ({liquidez_media:.2f}): Risco de dificuldades para cobrir custos operacionais. Negocie prazos de pagamento ou busque linhas de cr√©dito de curto prazo.")
        else:
            parecer.append(f"Liquidez Operacional Confort√°vel ({liquidez_media:.2f}): Boa capacidade de sustentar opera√ß√µes. Mantenha reservas para safras incertas.")

        if endividamento_medio > 30:
            parecer.append(f"Alto Endividamento ({endividamento_medio:.2f}%): D√≠vidas elevadas. Priorize a quita√ß√£o de empr√©stimos de alto custo ou renegocie taxas de juros.")
        else:
            parecer.append(f"Endividamento Controlado ({endividamento_medio:.2f}%): D√≠vidas em n√≠vel gerenci√°vel. Considere investimentos estrat√©gicos, como expans√£o de √°rea plantada.")

        if produtividade_media < media_receita_hectare_base * 0.8: # Comparar com uma linha de base ou m√©dia
            parecer.append(f"Produtividade por Hectare Baixa ({format_brl(produtividade_media)}): A receita por hectare est√° abaixo da m√©dia esperada. Avalie t√©cnicas de cultivo ou rota√ß√£o de culturas.")
        else:
            parecer.append(f"Produtividade por Hectare Boa ({format_brl(produtividade_media)}): Boa efici√™ncia no uso da terra. Considere investir em tecnologia para manter ou aumentar a produtividade.")

        if custo_receita_media > 70:
            parecer.append(f"Custo por Receita Alto ({custo_receita_media:.2f}%): Custos operacionais consomem grande parte da receita. Analise insumos e processos para reduzir despesas.")
        else:
            parecer.append(f"Custo por Receita Controlado ({custo_receita_media:.2f}%): Boa gest√£o de custos. Continue monitorando pre√ßos de insumos.")

        if dscr_medio != float("inf") and dscr_medio < 1.25:
            parecer.append(f"DSCR Baixo ({dscr_medio:.2f}): Risco de dificuldades no pagamento de d√≠vidas. Considere reestruturar financiamentos ou aumentar a receita.")
        else:
            parecer.append(f"DSCR Adequado ({dscr_medio:.2f}): Boa capacidade de cobrir d√≠vidas. Mantenha o lucro operacional est√°vel.")

        # Compara√ß√£o do Break-Even Yield: definir o que significa "alto".
        # Vamos comparar com uma porcentagem da produtividade m√©dia atual.
        if break_even_media > current_avg_yield * 0.8 and current_avg_yield != 0: # Se o break-even estiver pr√≥ximo de 80% da produtividade atual
            parecer.append(f"Break-Even Yield Alto ({break_even_media:.2f} sacas/ha): Alta depend√™ncia de produtividade para cobrir custos. Considere culturas mais resilientes ou seguros agr√≠colas.")
        else:
            parecer.append(f"Break-Even Yield Seguro ({break_even_media:.2f} sacas/ha): Margem de seguran√ßa confort√°vel contra falhas na safra.")

        if roa_medio < 5:
            parecer.append(f"ROA Baixo ({roa_medio:.2f}%): Baixa efici√™ncia no uso de ativos. Avalie a venda de ativos ociosos ou investimentos em equipamentos mais produtivos.")
        else:
            parecer.append(f"ROA Adequado ({roa_medio:.2f}%): Boa utiliza√ß√£o dos ativos. Considere expans√£o controlada ou moderniza√ß√£o.")

        if indicators["CAGR Lucro L√≠quido (%)"] < 0:
            parecer.append(f"Crescimento Negativo do Lucro ({indicators['CAGR Lucro L√≠quido (%)']:.2f}%): Lucro em queda. Revisar estrat√©gias de custo, pre√ßo e produtividade.")
        else:
            parecer.append(f"Crescimento do Lucro ({indicators['CAGR Lucro L√≠quido (%)']:.2f}%): Lucro em trajet√≥ria positiva. Considere reinvestir em √°reas estrat√©gicas.")

        st.markdown("\n".join([f"- {item}" for item in parecer]))

def generate_excel_export(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos):
    """Gera e fornece um bot√£o de download do Excel para todos os dados."""
    st.markdown("### ‚¨áÔ∏è Exportar Relat√≥rio Completo")
    
    def criar_relatorio_completo():
        """Cria um arquivo Excel completo com Fluxo de Caixa e Indicadores"""
        output_excel = BytesIO()
        
        with pd.ExcelWriter(output_excel, engine="xlsxwriter") as writer:
            # === DADOS DE INDICADORES ===
            for cenario in nomes_cenarios:
                # Indicadores
                indicators_df_for_excel = pd.DataFrame({
                    k: v for k, v in all_indicators[cenario].items()
                    if k not in ["CAGR Receita (%)", "CAGR Lucro L√≠quido (%)"]
                }, index=anos)
                # Adicionar CAGR como uma linha separada para clareza no Excel
                cagr_row_data = [all_indicators[cenario]["CAGR Receita (%)"], all_indicators[cenario]["CAGR Lucro L√≠quido (%)"]] + \
                                [np.nan] * (len(indicators_df_for_excel.columns) - 2)
                cagr_row = pd.Series(cagr_row_data, index=indicators_df_for_excel.columns, name="CAGR")
                indicators_df_for_excel = pd.concat([indicators_df_for_excel, pd.DataFrame(cagr_row).T])
                indicators_df_for_excel.to_excel(writer, sheet_name=f"Indicadores_{cenario}")

                # DRE
                df_dre_for_excel = pd.DataFrame(all_dre_data[cenario], index=anos).T
                df_dre_for_excel.to_excel(writer, sheet_name=f"DRE_{cenario}")

                # Resumo
                despesas_totais_summary = [
                    all_dre_data[cenario]["Impostos Sobre Venda"][i] +
                    all_dre_data[cenario]["Despesas Operacionais"][i] +
                    all_dre_data[cenario]["Despesas Administrativas"][i] +
                    all_dre_data[cenario]["Despesas RH"][i] +
                    all_dre_data[cenario]["Despesas Extra Operacional"][i] +
                    all_dre_data[cenario]["Dividendos"][i] +
                    all_dre_data[cenario]["Impostos Sobre Resultado"][i]
                    for i in range(len(anos))
                ]
                summary_df = pd.DataFrame({
                    "Receita": all_dre_data[cenario]["Receita"],
                    "Despesas Totais": despesas_totais_summary,
                    "Lucro L√≠quido": all_dre_data[cenario]["Lucro L√≠quido"]
                }, index=anos)
                summary_df.to_excel(writer, sheet_name=f"Resumo_{cenario}")

            # === DADOS DE FLUXO DE CAIXA ===
            # Incluir dados das despesas se existirem
            if st.session_state.get('fluxo_caixa') is not None and not st.session_state['fluxo_caixa'].empty:
                df_fluxo_despesas = st.session_state['fluxo_caixa'].copy()
                df_fluxo_despesas.to_excel(writer, sheet_name='Fluxo_Despesas', index=True)
                
                # Totais de despesas por ano
                totais_despesas = df_fluxo_despesas.sum(axis=0)
                df_totais_despesas = pd.DataFrame({
                    'Ano': totais_despesas.index,
                    'Total Despesas (R$)': totais_despesas.values
                })
                df_totais_despesas.to_excel(writer, sheet_name='Totais_Despesas', index=False)
            
            # Incluir despesas cadastradas
            if st.session_state.get('despesas'):
                df_despesas_cadastradas = pd.DataFrame(st.session_state['despesas'])
                df_despesas_cadastradas.to_excel(writer, sheet_name='Despesas_Cadastradas', index=False)
            
            # Incluir empr√©stimos cadastrados
            if st.session_state.get('emprestimos'):
                df_emprestimos_cadastrados = pd.DataFrame(st.session_state['emprestimos'])
                df_emprestimos_cadastrados.to_excel(writer, sheet_name='Emprestimos_Cadastrados', index=False)
        
            # Incluir plantios cadastrados
            if st.session_state.get('plantios'):
                plantios_list = []
                for nome, dados in st.session_state['plantios'].items():
                    plantio_row = {'Nome': nome}
                    plantio_row.update(dados)
                    plantios_list.append(plantio_row)
                df_plantios = pd.DataFrame(plantios_list)
                df_plantios.to_excel(writer, sheet_name='Plantios_Cadastrados', index=False)
            
            # Incluir receitas adicionais se existirem
            if st.session_state.get('receitas_adicionais'):
                receitas_list = []
                for nome, dados in st.session_state['receitas_adicionais'].items():
                    receita_row = {'Nome': nome}
                    receita_row.update(dados)
                    # Converter lista de anos para string
                    if 'anos_aplicacao' in receita_row:
                        receita_row['anos_aplicacao'] = ', '.join(receita_row['anos_aplicacao'])
                    receitas_list.append(receita_row)
                df_receitas_adicionais = pd.DataFrame(receitas_list)
                df_receitas_adicionais.to_excel(writer, sheet_name='Receitas_Adicionais', index=False)

            # Receita por Cultura
            df_culturas_for_excel.to_excel(writer, sheet_name="Receita_por_Cultura", index=False)
            
            # Configura√ß√µes (Infla√ß√£o e par√¢metros)
            df_config = pd.DataFrame({
                'Ano': anos,
                'Inflacao (%)': st.session_state.get('inflacoes', [4.0] * len(anos))
            })
            df_config.to_excel(writer, sheet_name='Configuracoes_Inflacao', index=False)
            
            df_config_params = pd.DataFrame({
                'Parametro': ['Receita Pessimista (%)', 'Despesa Pessimista (%)', 'Receita Otimista (%)', 'Despesa Otimista (%)'],
                'Valor': [
                    st.session_state.get('pess_receita', 15),
                    st.session_state.get('pess_despesas', 10),
                    st.session_state.get('otm_receita', 10),
                    st.session_state.get('otm_despesas', 10)
                ]
            })
            df_config_params.to_excel(writer, sheet_name='Parametros_Cenario', index=False)

        output_excel.seek(0)
        return output_excel
    
    def criar_relatorio_pdf(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos):
        """Cria um relat√≥rio PDF completo com todos os dados, gr√°ficos e tabelas"""
        try:
            from reportlab.lib import colors
            from reportlab.lib.pagesizes import letter, A4
            from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak, Image
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import inch
            import matplotlib.pyplot as plt
            import matplotlib
            matplotlib.use('Agg')  # Use non-interactive backend
            
            buffer = BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=50, leftMargin=50, topMargin=50, bottomMargin=50)
            
            # Estilos
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=16, spaceAfter=20, alignment=1)
            heading_style = ParagraphStyle('CustomHeading', parent=styles['Heading2'], fontSize=12, spaceAfter=10)
            subheading_style = ParagraphStyle('CustomSubHeading', parent=styles['Heading3'], fontSize=10, spaceAfter=8)
            normal_style = ParagraphStyle('CustomNormal', parent=styles['Normal'], fontSize=8)
            
            story = []
            
            # === P√ÅGINA DE T√çTULO ===
            timestamp = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
            story.append(Paragraph("üìà RELAT√ìRIO COMPLETO", title_style))
            story.append(Paragraph("GESTOR DE PLANTIO - INDICADORES FINANCEIROS", title_style))
            story.append(Spacer(1, 30))
            story.append(Paragraph(f"Gerado em: {timestamp}", normal_style))
            story.append(PageBreak())
            
            # === GR√ÅFICO: RECEITA vs LUCRO L√çQUIDO ===
            story.append(Paragraph("RECEITA vs LUCRO L√çQUIDO POR CEN√ÅRIO", heading_style))
            
            # Criar gr√°fico matplotlib
            fig, ax = plt.subplots(figsize=(10, 6))
            x = range(len(anos))
            width = 0.25
            
            colors_map = {'Projetado': '#1f77b4', 'Pessimista': '#ff7f0e', 'Otimista': '#2ca02c'}
            
            for i, cenario in enumerate(nomes_cenarios):
                receitas = all_dre_data[cenario]["Receita"]
                lucros = all_dre_data[cenario]["Lucro L√≠quido"]
                
                ax.bar([p + width*i for p in x], receitas, width, 
                       label=f'Receita ({cenario})', color=colors_map[cenario], alpha=0.7)
                ax.bar([p + width*i for p in x], lucros, width,
                       label=f'Lucro ({cenario})', color=colors_map[cenario], alpha=0.4)
            
            ax.set_xlabel('Anos')
            ax.set_ylabel('Valores (R$)')
            ax.set_title('Receita vs Lucro L√≠quido por Cen√°rio')
            ax.set_xticks([p + width for p in x])
            ax.set_xticklabels(anos)
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'R$ {x/1e6:.1f}M'))
            
            plt.tight_layout()
            
            # Salvar gr√°fico temporariamente
            img_buffer = BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close()
            
            # Adicionar ao PDF
            story.append(Image(img_buffer, width=6*inch, height=3.6*inch))
            story.append(Spacer(1, 20))
            story.append(PageBreak())
            
            # === SLIDE: FLUXO DE CAIXA DETALHADO ===
            if st.session_state.get('fluxo_caixa') is not None and not st.session_state['fluxo_caixa'].empty:
                story.append(Paragraph("FLUXO DE CAIXA - DESPESAS POR CATEGORIA", heading_style))
                
                # Tabela de fluxo de caixa (primeiras 10 linhas)
                df_fluxo = st.session_state['fluxo_caixa']
                rows = min(len(df_fluxo) + 1, 12)  # M√°ximo 11 categorias + cabe√ßalho
                cols = len(anos) + 1  # Anos + coluna categoria
                
                # Criar tabela
                table_data = [(['Categoria'] + anos)]
                
                # Dados do fluxo de caixa
                for categoria, valores in df_fluxo.head(11).iterrows():
                    row_data = [categoria]
                    row_data += [f"R$ {valores[ano]:,.0f}".replace(",", ".") for ano in anos]
                    table_data.append(row_data)
                
                # Adicionar linha de totais
                total_row = ["Total"] + [f"R$ {df_fluxo[ano].sum():,.0f}".replace(",", ".") for ano in anos]
                table_data.append(total_row)
                
                # Criar tabela
                table = Table(table_data, colWidths=[2.5*inch] + [0.8*inch]*len(anos))
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 7),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ]))
                story.append(table)
                story.append(PageBreak())
            
            # === INDICADORES FINANCEIROS DETALHADOS ===
            for cenario in nomes_cenarios:
                story.append(Paragraph(f"INDICADORES FINANCEIROS - CEN√ÅRIO {cenario.upper()}", heading_style))
                
                indicators = all_indicators[cenario]
                
                # Criar tabela de indicadores
                indicators_data = [['Indicador', 'Ano 1', 'Ano 2', 'Ano 3', 'Ano 4', 'Ano 5']]
                
                for indicator_name, values in indicators.items():
                    if indicator_name not in ["CAGR Receita (%)", "CAGR Lucro L√≠quido (%)"]:
                        if 'R$' in indicator_name:
                            formatted_values = [f"R$ {v:,.0f}".replace(",", ".") for v in values]
                        elif '%' in indicator_name or indicator_name == 'DSCR' or 'Real Gasto' in indicator_name or 'Operacional' in indicator_name:
                            formatted_values = [f"{v:.2f}" + ("%" if "%" in indicator_name else "") for v in values]
                        else:
                            formatted_values = [f"{v:.2f}" for v in values]
                        
                        indicators_data.append([indicator_name] + formatted_values)
                
                # Adicionar CAGR
                indicators_data.append(['CAGR Receita (%)', f"{indicators['CAGR Receita (%)']:.2f}%", '-', '-', '-', '-'])
                indicators_data.append(['CAGR Lucro L√≠quido (%)', f"{indicators['CAGR Lucro L√≠quido (%)']:.2f}%", '-', '-', '-', '-'])
                
                # Criar tabela
                indicators_table = Table(indicators_data, colWidths=[2.5*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.8*inch])
                indicators_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 7),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ]))
                story.append(indicators_table)
                story.append(Spacer(1, 15))
                
                # === DRE COMPLETO ===
                story.append(Paragraph(f"DRE DETALHADO - CEN√ÅRIO {cenario.upper()}", subheading_style))
                
                dre_data = all_dre_data[cenario]
                dre_table_data = [['Item', 'Ano 1', 'Ano 2', 'Ano 3', 'Ano 4', 'Ano 5']]
                
                for item, values in dre_data.items():
                    formatted_values = [f"R$ {v:,.0f}".replace(",", ".") for v in values]
                    dre_table_data.append([item] + formatted_values)
                
                dre_table = Table(dre_table_data, colWidths=[2.5*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.8*inch])
                dre_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 7),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ]))
                story.append(dre_table)
                story.append(PageBreak())
            
            # === RECEITA POR CULTURA ===
            story.append(Paragraph("RECEITA POR CULTURA (ANO BASE)", heading_style))
            
            cultura_data = [['Cultura', 'Receita Total (R$)', '√Årea (ha)', 'Receita/ha (R$)']]
            for _, row in df_culturas_for_excel.iterrows():
                cultura_data.append([
                    str(row['Cultura']),
                    f"R$ {row['Receita Total']:,.0f}".replace(",", "."),
                    f"{row['√Årea (ha)']:.1f}",
                    f"R$ {row['Receita por ha']:,.0f}".replace(",", ".")
                ])
            
            cultura_table = Table(cultura_data, colWidths=[2*inch, 1.5*inch, 1*inch, 1.5*inch])
            cultura_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.green),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(cultura_table)
            story.append(Spacer(1, 20))
            
            # === DADOS BASE ===
            story.append(PageBreak())
            story.append(Paragraph("DADOS BASE DO SISTEMA", heading_style))
            
            # Plantios
            if st.session_state.get('plantios'):
                story.append(Paragraph("Plantios Cadastrados:", subheading_style))
                plantios_data = [['Nome', 'Cultura', 'Hectares', 'Sacas/ha', 'Pre√ßo/Saca']]
                for nome, dados in st.session_state['plantios'].items():
                    plantios_data.append([
                        nome,
                        dados.get('cultura', ''),
                        f"{dados.get('hectares', 0):.1f}",
                        f"{dados.get('sacas_por_hectare', 0):.1f}",
                        f"R$ {dados.get('preco_saca', 0):.2f}".replace(".", ",")
                    ])
                
                plantios_table = Table(plantios_data)
                plantios_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black)
                ]))
                story.append(plantios_table)
                story.append(Spacer(1, 15))
            
            # Despesas resumidas
            if st.session_state.get('despesas'):
                story.append(Paragraph("Resumo de Despesas por Categoria:", subheading_style))
                df_despesas = pd.DataFrame(st.session_state['despesas'])
                despesas_resumo = df_despesas.groupby('Categoria')['Valor'].sum()
                
                despesas_data = [['Categoria', 'Valor Total (R$)']]
                for categoria, valor in despesas_resumo.items():
                    despesas_data.append([categoria, f"R$ {valor:,.0f}".replace(",", ".")])
                
                despesas_table = Table(despesas_data)
                despesas_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.orange),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black)
                ]))
                story.append(despesas_table)
                story.append(Spacer(1, 15))
            
            # Configura√ß√µes
            story.append(Paragraph("Configura√ß√µes do Sistema:", subheading_style))
            config_data = [['Par√¢metro', 'Valor']]
            config_data.append(['Receita Pessimista (%)', f"-{st.session_state.get('pess_receita', 15)}%"])
            config_data.append(['Despesa Pessimista (%)', f"+{st.session_state.get('pess_despesas', 10)}%"])
            config_data.append(['Receita Otimista (%)', f"+{st.session_state.get('otm_receita', 10)}%"])
            config_data.append(['Despesa Otimista (%)', f"-{st.session_state.get('otm_despesas', 10)}%"])
            
            for i, ano in enumerate(anos):
                inflacao = st.session_state.get('inflacoes', [4.0] * len(anos))[i]
                config_data.append([f'Infla√ß√£o {ano}', f"{inflacao:.2f}%"])
            
            config_table = Table(config_data)
            config_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.purple),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.black)
            ]))
            story.append(config_table)
            
            # Construir PDF
            doc.build(story)
            buffer.seek(0)
            return buffer
            
        except ImportError as e:
            st.error(f"Bibliotecas necess√°rias n√£o encontradas. Instale com: pip install reportlab matplotlib")
            return None
        except Exception as e:
            st.error(f"Erro ao gerar PDF: {str(e)}")
            return None

    # Criar as colunas para os bot√µes
    col_export1, col_export2, col_export3, col_export4 = st.columns([1, 1, 1, 1])
    
    with col_export1:
        if st.button("üìä Gerar Excel", type="primary", key="relatorio_excel"):
            try:
                excel_buffer = criar_relatorio_completo()
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"relatorio_completo_gestor_plantio_{timestamp}.xlsx"
                
                st.download_button(
                    label="‚¨áÔ∏è Baixar Excel",
                    data=excel_buffer,
                    file_name=filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key="download_excel"
                )
                st.success("Excel gerado!")
            except Exception as e:
                st.error(f"Erro ao gerar Excel: {e}")
    
    with col_export2:
        if st.button("üìÑ Gerar PDF", type="secondary", key="relatorio_pdf"):
            try:
                pdf_buffer = criar_relatorio_pdf(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos)
                if pdf_buffer:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"relatorio_indicadores_{timestamp}.pdf"
                    
                    st.download_button(
                        label="‚¨áÔ∏è Baixar PDF", 
                        data=pdf_buffer,
                        file_name=filename,
                        mime="application/pdf",
                        key="download_pdf"
                    )
                    st.success("PDF gerado!")
            except Exception as e:
                st.error(f"Erro ao gerar PDF: {e}")
    
    with col_export3:
        if st.button("üéØ Gerar PPT", key="relatorio_ppt"):
            try:
                # Importar o gerador de PPT
                from utils.ppt_generator import criar_relatorio_ppt
                
                ppt_buffer = criar_relatorio_ppt(all_indicators, all_dre_data, df_culturas_for_excel, nomes_cenarios, anos)
                if ppt_buffer:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"apresentacao_indicadores_{timestamp}.pptx"
                    
                    st.download_button(
                        label="‚¨áÔ∏è Baixar PPT",
                        data=ppt_buffer,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.presentationml.presentation",
                        key="download_ppt"
                    )
                    st.success("PowerPoint gerado!")
                else:
                    st.error("N√£o foi poss√≠vel gerar o PowerPoint. Verifique se as bibliotecas est√£o instaladas.")
            except ImportError as e:
                st.error(f"""
                ‚ùå **Erro de importa√ß√£o:** {str(e)}
                
                **Para usar a exporta√ß√£o PPT, instale:**
                ```bash
                pip install python-pptx
                ```
                """)
            except Exception as e:
                st.error(f"Erro ao gerar PowerPoint: {e}")
    
    with col_export4:
        st.info("""
        üìã **Formatos:
        
        **Excel:** Dados completos
        **PDF:** Relat√≥rio visual  
        **PPT:** Apresenta√ß√£o edit√°vel
        
        Todos incluem gr√°ficos, tabelas e indicadores.
        """)

def main():
    display_indicator_explanation()

    # Carrega todos os dados necess√°rios do session_state e calcula os totais base
    session_data = get_base_financial_data()

    # Exibe os par√¢metros de cen√°rio
    display_scenario_parameters(session_data)

    # Exibe a receita por cultura
    df_culturas_for_excel = display_revenue_by_crop(session_data)

    # Nomes dos cen√°rios
    nomes_cenarios = ["Projetado", "Pessimista", "Otimista"]
    anos = session_data["anos"]

    # Calcula os indicadores para cada cen√°rio
    all_indicators = {}
    for cenario_name in nomes_cenarios:
        # Acessa os dados do DRE que foram salvos pelo 4_Fluxo_de_Caixa.py
        dre_data = session_data["dre_cenarios"][cenario_name]
        all_indicators[cenario_name] = calculate_indicators_for_scenario(cenario_name, dre_data, session_data)

    # Exibe as tabelas de indicadores
    display_indicators_table(all_indicators, anos)

    # Exibe o resumo financeiro
    display_financial_summary(session_data["dre_cenarios"], anos)

    # Gera e exibe as visualiza√ß√µes 
    generate_visualizations(session_data["dre_cenarios"], all_indicators, anos, nomes_cenarios, session_data)

    # Gera o parecer financeiro
    generate_financial_opinion(all_indicators, session_data)
    
    # Bot√£o de exportar para Excel
    generate_excel_export(all_indicators, session_data["dre_cenarios"], df_culturas_for_excel, nomes_cenarios, anos)

if __name__ == "__main__":
    main()